
<div class="row">
    <div class="col-md-10"></div>
    <div class="col-md-2"><a id="callApi" href="#">Who am I?</a></div>
</div>
<div class="row" id="signInFormWrapper">
    <div class="col-md-4">
        <form id="signInForm">
            <div class="row">
                <div class="col-md-6">
                    <label for="username">User name</label>
                </div>
                <div class="col-md-6">
                    <input id="username" name="username" type="text" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <label for="password">Password</label>
                </div>
                <div class="col-md-6">
                    <input id="password" name="password" type="password" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <input type="submit" value="Sign in" />
                </div>
            </div>
        </form>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <ul id="messages"></ul>
    </div>
</div>
<div class="row" id="newMessageContainer" style="display: none">
    <div class="col-md-12">
        <input id="newMessage" type="text" />
    </div>
</div>

@section scripts {
    <script src="https://localhost:44300/signalr/hubs"></script>

    <script type="text/javascript">

        var ChatHubWrapper = function() {
            var self = this;
            var chat = null;
            var isStarted = false;
            var onMessageCallback = function() {};


            self.start = function () {
                $.connection.hub.url = 'https://localhost:44300/signalr';
                chat = $.connection.chatHub;
                chat.client.onMessage = onMessageCallback;
                return $.connection.hub.start()
                    .done(function() { isStarted = true; });

            };

            self.stop = function() {
                isStarted = false;
                chat = null;
                return $.connection.hub.stop();
            };

            self.sendMessage = function(message) {
                if (isStarted) {
                    chat.server.sendMessage(message);
                };
            };

            self.onMessage = function(callback) {
                onMessageCallback = callback;
                if (isStarted)
                    chat.client.onMessage = onMessageCallback;
            };


            self.useBearerToken = function(token) {
                var wasStarted = isStarted;

                if (isStarted)
                // restart, so that connection is assigned to correct group
                    self.stop();

                setTokenCookie(token);

                if (wasStarted)
                    self.start();
            };

            function setTokenCookie(token) {
                if (token)
                    document.cookie = "BearerToken=" + token + "; path=/";
            }

            self.clearAuthentication = function() {
                document.cookie = "BearerToken=; path=/; expires=" + new Date(0).toUTCString();
            }

        };

        var chatHub = new ChatHubWrapper();
        // clear token cookie when page reloads
        chatHub.clearAuthentication();

        $(document).ready(function() {
            chatHub.onMessage(appendMessage);
            chatHub.start().done(function() {
                toastr.success("Connected to the hub");
            });

            $("#signInForm").submit(onSignInFromSubmit);
            $("#newMessage").keypress(onNewMessageKeyPress);
            $("#callApi").click(getUserInformation);
        });

        function appendMessage(userName, message) {
            var newMessageSpan = $("<li>").text(userName + ": " + message);
            newMessageSpan.appendTo("#messages");
        }

        function onSignInFromSubmit(e) {
            e.preventDefault();

            var userName = $("#username").val();
            var password = $("#password").val();
            signIn(userName, password).done(function() {
                $("#signInForm").slideUp();
                $("#newMessageContainer").slideDown();
                $("#newMessage").focus();
            });
        }

        function onNewMessageKeyPress(e) {
            if (e.which == 13) {
                e.preventDefault();
                chatHub.sendMessage($("#newMessage").val());
                $("#newMessage").val("");
            }
        };

        function signIn(userName, password) {
            return $.post("https://localhost:44300/token", { grant_type: "password", username: userName, password: password })
                .done(function(data) {
                    if (data && data.access_token) {
                        chatHub.useBearerToken(data.access_token);
                        bearerToken = data.access_token;
                        toastr.success("Login successful");
                    }
                })
                .fail(function(xhr) {
                    if (xhr.status == 400) {
                        toastr.error("Invalid user name or password");
                    } else {
                        toastr.error("Unexpected error while signing in");
                    }
                });
        }

        // example of WebAPI call using bearer token
        var bearerToken = null;

        function getUserInformation() {

            // version 1: use the same cookie SignalR is using
            var promise = $.get("https://localhost:44300/api/whoami");

            // version 2: use explicit Authorization header
            //var cookieTempStorage = null;
            //var promise = $.ajax({
            //    url: "/api/whoami",
            //    beforeSend: function (xhr) {
            //        // to demonstrate this works without a cookie, we need to clear cookies before call
            //        cookieTempStorage = document.cookie;
            //        chatHub.clearAuthentication();

            //        if (bearerToken)
            //            xhr.setRequestHeader("Authorization", "Bearer " + bearerToken);
            //    }
            //})
            //.always(function() {
            //    // restore cookies
            //    document.cookie = cookieTempStorage;
            //});

            promise.success(function(userName) {
                alert("You are " + userName);
            });
        }


    </script>
}